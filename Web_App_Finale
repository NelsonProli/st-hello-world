import pandas as pd
import requests
import time
import streamlit as st
import altair as alt
import random as r





# # # Def



@st.cache_data(show_spinner= False) 
def html(url, number, set__index = "INDEX", rename = "DICTIONARY",  other_function  = "OTHER"):
    
    # Da un URL ricava l html richiesto con index
    
    r = requests.get(url, Header, verify= True)
    dfs = pd.read_html(r.text)
    df = dfs[number]


    if set__index != "INDEX":
       df.set_index(set__index, inplace = True )

    if rename != "DICTIONARY":
       df.rename(rename, inplace = True, axis = 1)

    # Altra funzione tutta da stabilire come stringa
    
    if other_function != "OTHER":
        exec(other_function)


    st.dataframe(df)

    return df 



@st.cache_data(show_spinner= False)    
def grafico(nome_variabile_y,variabile_y, nome_variabile_x, variabile_x):

    # Con informazioni variabili X e Y da un altchart 

    source = pd.DataFrame(
        {f"{nome_variabile_y}" : variabile_y,
        f"{nome_variabile_x}" : variabile_x},   
    )

    bar_chart = alt.Chart(source).mark_bar(color= "orange").encode(
        y = f"{nome_variabile_y}",
        x = f"{nome_variabile_x}",   
    )

    st.sidebar.altair_chart(bar_chart, use_container_width= True)




@st.cache_data(show_spinner= False) 
def ListaCompletaPiloti():
    
    # Ricava informazioni per ottenere il maggior numero di piloti possibile sotto forma di lista

    #1    
    r = requests.get(url, Header, verify= True)
    dfs = pd.read_html(r.text)
    df = dfs[21]
    lista_piloti = df["Pilota"].tolist()

    #2
    r = requests.get(url, Header, verify= True)
    dfs = pd.read_html(r.text)
    df = dfs[22]
    lista_p2 = df["Pilota"].tolist()

    #3
    r = requests.get(url, Header, verify= True)
    dfs = pd.read_html(r.text)
    df = dfs[23]
    lista_p3 = df["Pilota"].tolist()

    #Lista Finale
    lista_p3.extend(lista_p2)
    lista_piloti.extend(lista_p3)

    return lista_piloti



@st.cache_data(show_spinner= False)
def ListTemporary( num, name = "Pilota", rename = "DICTIONARY", url =  "https://it.wikipedia.org/wiki/Statistiche_dei_piloti_di_Formula_1"): 

    # Crea lista temporanea 
    
    r = requests.get(url, Header, verify= True)
    dfs = pd.read_html(r.text)
    df = dfs[num]

    if rename != "DICTIONARY":
       df.rename(rename, inplace = True, axis = 1)
    lista_piloti = df[name].tolist()

    return lista_piloti

        






@st.cache_data(show_spinner= False)
def DaIndex(lista_piloti, lista_record, pilota_scelto):

    # Dato l'index di un elemento in tabella ricava l'elemento a fianco
   
    Index = -1
    for num in lista_piloti:
        Index += 1
        if num == pilota_scelto:
            break

    return lista_record[Index]










@st.cache_data(show_spinner= False) 
def ListePiloti(request = 0, request_ = "1 Piloti, 2 Record", constructor = False, graphic  = False):

    # Dati i numeri di riferimento di una lista ottiene la lista da ListTemporary

    if request == 0:
        s =  ListTemporary(1) # cp_lista_p 
        s1 = s[0]
        if request_ == 2:
            s = ListTemporary(1, "Titoli",{"Nº Titoli": "Titoli"} )    # cp_lista_t 
            s1 = s[0]
    if request == 1:
        s = ListTemporary(1, "Costruttore", url= "https://it.wikipedia.org/wiki/Campionato_mondiale_costruttori_di_Formula_1")    # cc_lista_c
        s1c = s[0]
        if request_ == 2:
            s = ListTemporary(1, "Titoli", {"Totale": "Titoli"}, url= "https://it.wikipedia.org/wiki/Campionato_mondiale_costruttori_di_Formula_1" )     # cc_lista_t
            s1c = s[0]
    if request == 2:
        s = ListTemporary(11)     # gpd_lista_p
        s1 = s[0]
        if request_ == 2:
            s = ListTemporary(11, "Gran Premi")     # gpd_lista_gp
            s1 = s[0]
    if request == 3:
        s = ListTemporary(21)     # v_lista_p
        s1 = s[0]
        if request_ == 2:
            s = ListTemporary(21, "Vittorie")     # v_lista_v
            s1 = s[0]
    if request == 4: 
        s = ListTemporary(34)     # vgp_lista_p
        s1 = s[0]
        if request_ == 2:
            s = ListTemporary(34, "Vittorie")     # vgp_lista_v
            s1 = s[0]
    if request == 5:
        s = ListTemporary(40)     # pp_lista_pi
        s1 = s[0]
        if request_ == 2: 
            s = ListTemporary(40, "Pole")     # pp_lista_p
            s1 = s[0]
    
    if constructor is True and graphic is True:
        return s
    
    if constructor is True:
        return s1c
    
    if graphic is True:
        return s
    
    else:
        return s1
    






@st.cache_data(show_spinner= False)
def ListaCompleta(type = 1):

    # Liste temporanee tutte insieme in 2 liste

    cp_lista_p = ListTemporary(1)
    cp_lista_t = ListTemporary(1, "Titoli",{"Nº Titoli": "Titoli"} )
    gpd_lista_p = ListTemporary(11)
    gpd_lista_gp = ListTemporary(11, "Gran Premi")
    v_lista_p = ListTemporary(21)
    v_lista_v = ListTemporary(21, "Vittorie")
    vgp_lista_p = ListTemporary(34)
    vgp_lista_v = ListTemporary(34, "Vittorie")
    pp_lista_pi = ListTemporary(40)
    pp_lista_p = ListTemporary(40, "Pole")

    
    if type ==1:
        return [cp_lista_p, gpd_lista_p,v_lista_p, vgp_lista_p,pp_lista_pi]
    
    elif type ==2:
        return [cp_lista_t,gpd_lista_gp,v_lista_v, vgp_lista_v,pp_lista_p]
    
                
@st.cache_data(show_spinner= False)            
def MainPiloti( seleziona_pilota, seleziona_record, lista_statistiche_piloti):

    # Ricava info da ListaCompleta() e lo unisce con DaIndex()

    lista_piloti = ListaCompleta(type=1)  
    lista_record = ListaCompleta(type=2)    
    
    if seleziona_record == lista_statistiche_piloti[0]:
        index_r = 0
    if seleziona_record == lista_statistiche_piloti[1]:
        index_r = 1
    if seleziona_record == lista_statistiche_piloti[2]:
        index_r = 2
    if seleziona_record == lista_statistiche_piloti[3]:
        index_r = 3
    if seleziona_record == lista_statistiche_piloti[4]:
        index_r = 4
    
    if seleziona_pilota in lista_piloti[index_r]:
        statistica = DaIndex(lista_piloti[index_r], lista_record[index_r], seleziona_pilota)

        st.markdown(f"{seleziona_pilota} ha {lista_markdown_piloti1[index_r]} {statistica} {lista_markdown_piloti2[index_r]}")

    else:
        st.markdown(f"{seleziona_pilota} non ne ha")




# # # Variables  



# Il Mio User Agent
Header = {
    "User-Agent" : "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/113.0.0.0 Safari/537.36 OPR/99.0.0.0",
    "X-Requested-With" : "XMLHttpRequest"}





# URL principale 
url =  "https://it.wikipedia.org/wiki/Statistiche_dei_piloti_di_Formula_1"

lista_statistiche_piloti = ["Campionato Piloti", "Gran Premi Disputati", "Vittorie", "Vittorie Sulla Stessa Pista", "Pole Position", ]

lista_statistiche = ["Campionato Piloti", "Campionato Costruttori", "Gran Premi Disputati","Vittorie",  "Vittorie Sulla Stessa Pista", "Pole Position", ]
















st.title("F1 Main Wiki")

Select_box = st.selectbox(" ", ["Record", "Tutti i piloti"])


if Select_box == "Record":
    st.divider()
    
    
    st.sidebar.header("Cerca una statistica")
    seleziona_impostazioni = st.sidebar.selectbox(" ",lista_statistiche )
    st.header("Statistiche")

    
    
    if seleziona_impostazioni == "Campionato Piloti":
        
        html(url, 1,"Pos.", {"Nº Titoli": "Titoli"})
        
        
        
        
        s = ListePiloti(0)
        
        st.sidebar.markdown(f"**{str(s)}** è in testa alla classifica")
        Check_Box_Graph_Piloti = st.sidebar.checkbox("Grafico")
        if Check_Box_Graph_Piloti:
            
            s = ListePiloti(0, graphic= True )
            s_ = ListePiloti(0,2, graphic=True )
            
            grafico("Pilota",s ,"Campionati Vinti", s_)
        

    
   
               
    elif seleziona_impostazioni == "Campionato Costruttori":
        

        url_c = "https://it.wikipedia.org/wiki/Campionato_mondiale_costruttori_di_Formula_1"
        html(url_c, 1,"Costruttore", {"Totale": "Titoli"})
        
        s = ListePiloti(1, constructor= True )
        
        
        
        costuttore_in_testa = "blue"
        if s == "Ferrari":
            costruttore_in_testa = "red"
        elif s == "McLaren":
            costruttore_in_testa = "orange"
        st.sidebar.markdown(f":{costruttore_in_testa}[{str(s)}] è in testa alla classifica")
        Check_Box_Graph = st.sidebar.checkbox("Grafico")
        if Check_Box_Graph:


            s = ListePiloti(1,constructor= True,  graphic= True )
            s_ = ListePiloti(1, 2,constructor= True, graphic= True )    
            grafico("Scuderia",s,"Campionati Vinti", s_)


        

    elif seleziona_impostazioni == "Gran Premi Disputati":
        html(url, 11,"Pos.")
        
        s = ListePiloti(2)
        
        

        st.sidebar.markdown(f"**{str(s)}** è in testa alla classifica")
        Check_Box_Graph_Piloti = st.sidebar.checkbox("Grafico")
        if Check_Box_Graph_Piloti:
            s = ListePiloti(2, graphic= True )
            s_ = ListePiloti(2,2, graphic=True )
            grafico("Pilota",s,"Gran Premi Disputati", s_)

          
    elif seleziona_impostazioni == "Vittorie":
        
        html(url, 21,"Pos.")
        
        s = ListePiloti(3)
        


        st.sidebar.markdown(f"**{str(s)}** è in testa alla classifica")
        html(url, 22,"Pos.")
        html(url, 23,"Pos.")
        Check_Box_Graph_Piloti = st.sidebar.checkbox("Grafico")

        if Check_Box_Graph_Piloti:
            
            s = ListePiloti(3, graphic= True )
            s_ = ListePiloti(3,2, graphic=True )

            grafico("Pilota",s,"Vittorie", s_)

    elif seleziona_impostazioni == "Vittorie Sulla Stessa Pista":
        
        html(url, 34,"Pos.")
        
        s = ListePiloti(4)
        
        st.sidebar.markdown(f"**{str(s)}** è in testa alla classifica")
        Check_Box_Graph = st.sidebar.checkbox("Grafico")
        if Check_Box_Graph:
            s = ListePiloti(4, graphic= True )
            s_ = ListePiloti(4,2, graphic=True )

            grafico("Pilota",s,"Vittorie", s_)
    
    elif seleziona_impostazioni == "Pole Position":
        
        html(url, 40,"Pos.")
        s = ListePiloti(5)
        
        
        
        st.sidebar.markdown(f"**{str(s)}** è in testa alla classifica")
        html(url, 41,"Pos.")
        html(url, 42,"Pos.")
        Check_Box_Graph_Piloti = st.sidebar.checkbox("Grafico")
        if Check_Box_Graph_Piloti:
            s = ListePiloti(5, graphic= True )
            s_ = ListePiloti(5,2, graphic=True )
            
            grafico("Pilota",s,"Pole", s_)
        
    
    

    
    





if Select_box == "Tutti i piloti":



    lista_markdown_piloti1  = ["vinto", "disputato", "vinto", "vinto" , "registrato" ]
    lista_markdown_piloti2 = ["Campionati del mondo", "Gran Premi","Gran Premi" , "Gran premi sulla stessa pista", "pole position"]
    lista_piloti_main = ListaCompletaPiloti()

    

    st.divider()
    
    seleziona_pilota = st.selectbox(" ", lista_piloti_main)
    
    if seleziona_pilota:

        seleziona_record = st.selectbox(" ", lista_statistiche_piloti)
        if seleziona_record:
            MainPiloti(seleziona_pilota, seleziona_record, lista_statistiche_piloti)
   


    



  

